Directory Structure:

└── ./
    └── packages
        └── naiveui
            ├── src
            │   ├── components
            │   │   ├── autoComplete
            │   │   │   ├── autoComplete.tsx
            │   │   │   └── index.ts
            │   │   ├── cascader
            │   │   │   ├── cascader.tsx
            │   │   │   └── index.ts
            │   │   ├── mention
            │   │   │   ├── index.ts
            │   │   │   └── mention.tsx
            │   │   ├── select
            │   │   │   ├── index.ts
            │   │   │   └── select.tsx
            │   │   ├── transfer
            │   │   │   ├── index.ts
            │   │   │   └── transfer.tsx
            │   │   ├── tree
            │   │   │   ├── index.ts
            │   │   │   └── tree.tsx
            │   │   ├── treeSelect
            │   │   │   ├── index.ts
            │   │   │   └── treeSelect.tsx
            │   │   └── index.ts
            │   ├── hooks
            │   │   ├── index.ts
            │   │   ├── menu.ts
            │   │   ├── tab.ts
            │   │   ├── table.tsx
            │   │   └── upload.ts
            │   └── index.ts
            ├── .gitignore
            ├── CHANGELOG.md
            ├── LICENSE
            ├── package.json
            ├── README.md
            ├── tsconfig.json
            └── vite.config.ts



---
File: /packages/naiveui/src/components/autoComplete/autoComplete.tsx
---

import type { AutoCompleteProps } from 'naive-ui'
import type { PropType } from 'vue'
import { useSelect } from '@duxweb/dvha-core'
import { useVModel } from '@vueuse/core'
import { NAutoComplete } from 'naive-ui'
import { defineComponent, toRef, watch } from 'vue'

interface DuxAutoCompleteProps extends AutoCompleteProps {
  path?: string
  params?: Record<string, any>
  pagination?: boolean
  valueField?: string
  labelField?: string
}

export const DuxAutoComplete = defineComponent<DuxAutoCompleteProps>({
  name: 'DuxAutoComplete',
  props: {
    path: String,
    params: Object as PropType<Record<string, any>>,
    pagination: {
      type: Boolean,
      default: true,
    },
    valueField: {
      type: String,
      default: 'id',
    },
    labelField: {
      type: String,
      default: 'name',
    },
    multiple: Boolean,
  },
  extends: NAutoComplete,
  setup(props, { emit, slots }) {
    const model = useVModel(props, 'value', emit, {
      passive: true,
      defaultValue: props.defaultValue || undefined,
    })

    const path = toRef(props, 'path')
    const params = toRef(props, 'params', {})

    const { onSearch, loading, options } = useSelect({
      path: path.value || '',
      params: params.value,
      pagination: props.pagination,
      optionValue: props.valueField || 'id',
    })

    watch(model, () => {
      onSearch(model.value || '')
    }, { immediate: true })

    return () => (
      <NAutoComplete
        {...props}
        loading={loading.value}
        clearable
        options={options.value?.map(item => ({
          label: item[props.labelField || 'name'],
          value: item[props.valueField || 'id'],
        }))}
        showEmpty={true}
        v-model:value={model.value}
      >
        {{
          ...slots,
        }}
      </NAutoComplete>
    )
  },
})



---
File: /packages/naiveui/src/components/autoComplete/index.ts
---

export * from './autoComplete'



---
File: /packages/naiveui/src/components/cascader/cascader.tsx
---

import type { CascaderProps } from 'naive-ui'
import type { PropType } from 'vue'
import { useTree } from '@duxweb/dvha-core'
import { useVModel } from '@vueuse/core'
import { NCascader, NSpin } from 'naive-ui'
import { computed, defineComponent, toRef } from 'vue'

interface DuxCascaderProps extends CascaderProps {
  path?: string
  params?: Record<string, any>
}

export const DuxCascader = defineComponent<DuxCascaderProps>({
  name: 'DuxCascader',
  props: {
    path: String,
    params: Object as PropType<Record<string, any>>,
  },
  extends: NCascader,
  setup(props, { emit, slots }) {
    const path = toRef(props, 'path', '')
    const params = toRef(props, 'params', {})

    const model = useVModel(props, 'value', emit, {
      passive: true,
      defaultValue: props.defaultValue,
    })

    const { options, loading } = useTree({
      path: path.value,
      params: params.value,
    })

    const cascaderProps = computed(() => {
      const { path, params, ...rest } = props
      return rest
    })

    return () => (
      <NSpin show={loading.value} class="w-full" size={16}>
        <NCascader
          {...cascaderProps.value}
          clearable
          options={options.value}
          v-model:value={model.value}
        >
          {{
            ...slots,
          }}
        </NCascader>
      </NSpin>
    )
  },
})



---
File: /packages/naiveui/src/components/cascader/index.ts
---

export * from './cascader'



---
File: /packages/naiveui/src/components/mention/index.ts
---

export * from './mention'



---
File: /packages/naiveui/src/components/mention/mention.tsx
---

import type { MentionOption, MentionProps } from 'naive-ui'
import type { PropType } from 'vue'
import { useCustomMutation } from '@duxweb/dvha-core'
import { useVModel } from '@vueuse/core'
import { NMention } from 'naive-ui'
import { defineComponent, ref, toRef } from 'vue'

interface DuxMentionProps extends MentionProps {
  path?: string
  params?: Record<string, any>
  labelField?: string
  valueField?: string
}

export const DuxMention = defineComponent<DuxMentionProps>({
  name: 'DuxMention',
  props: {
    path: String,
    params: Object as PropType<Record<string, any>>,
    labelField: {
      type: String,
      default: 'name',
    },
    valueField: {
      type: String,
      default: 'name',
    },
  },
  extends: NMention,
  setup(props, { emit, slots }) {
    const model = useVModel(props, 'value', emit, {
      passive: true,
      defaultValue: props.defaultValue,
    })

    const options = ref<MentionOption[]>([])
    const loading = ref(false)

    const path = toRef(props, 'path')
    const params = toRef(props, 'params', {})

    const { mutateAsync } = useCustomMutation({
      path: path.value,
      query: params.value,
      method: 'GET',
    })

    const handleSearch = (pattern: string) => {
      if (!path.value || !pattern) {
        options.value = []
        return
      }

      loading.value = true
      mutateAsync({
        query: {
          keyword: pattern,
          limit: 10,
        },
      }).then((res) => {
        options.value = res?.data?.map(row => ({
          label: row[props.labelField || 'name'],
          value: row[props.valueField || 'name'],
        })) || []
      }).catch(() => {
        options.value = []
      }).finally(() => {
        loading.value = false
      })
    }

    return () => (
      <NMention {...props} v-model:value={model.value} options={options.value} onSearch={handleSearch} loading={loading.value}>
        {{
          ...slots,
        }}
      </NMention>
    )
  },
})



---
File: /packages/naiveui/src/components/select/index.ts
---

export * from './select'



---
File: /packages/naiveui/src/components/select/select.tsx
---

import type { SelectProps } from 'naive-ui'
import type { VNodeChild } from 'vue'
import { useSelect } from '@duxweb/dvha-core'
import { useVModel } from '@vueuse/core'
import { NAvatar, NImage, NPagination, NSelect, NSpace, NTag } from 'naive-ui'
import { computed, defineComponent, toRef } from 'vue'

interface DuxSelectProps extends SelectProps {
  path?: string
  params?: Record<string, any>
  pagination?: boolean
  avatarField?: string
  imageField?: string
  descField?: string
  multiple?: boolean
}

export const DuxSelect = defineComponent<DuxSelectProps>({
  name: 'DuxSelect',
  props: {
    path: String,
    params: Object,
    pagination: {
      type: Boolean,
      default: true,
    },
    avatarField: {
      type: String,
    },
    imageField: {
      type: String,
    },
    descField: {
      type: String,
    },
    multiple: Boolean,
  },
  extends: NSelect,
  setup(props, { emit, slots }) {
    const params = toRef(props, 'params', {})
    const path = toRef(props, 'path')

    const model = useVModel(props, 'value', emit, {
      passive: true,
      defaultValue: props.defaultValue,
    })

    const labelField = toRef(props, 'labelField', 'name')
    const valueField = toRef(props, 'valueField', 'id')
    const avatarField = toRef(props, 'avatarField', '')
    const imageField = toRef(props, 'imageField', '')
    const descField = toRef(props, 'descField', '')

    const { onSearch, loading, pagination, options, pageCount } = useSelect({
      path: path.value || '',
      params: params.value,
      defaultValue: model.value,
      pagination: props.pagination,
      optionLabel: labelField.value,
      optionValue: valueField.value,
    })

    const selectProps = computed(() => {
      const { labelField, valueField, avatarField, imageField, descField, ...rest } = props
      return rest
    })

    return () => (
      <NSelect
        {...selectProps.value}
        onSearch={onSearch}
        loading={loading.value}
        filterable={!!props.pagination}
        clearable
        remote
        options={options.value}
        v-model:value={model.value}
        multiple={props.multiple}
        onClear={() => {
          onSearch('')
        }}
        renderLabel={(item: Record<string, any>) => {
          if (imageField.value || descField.value) {
            return (
              <NSpace
                align="center"
                size="small"
                wrapItem={false}
                style={{
                  padding: '6px 0',
                }}
              >
                {imageField.value && (
                  <NImage src={item?.raw?.[imageField.value]} objectFit="cover" width={32} height={32} />
                )}
                {avatarField.value && (
                  <NAvatar
                    round
                    src={item?.raw?.[avatarField.value]}
                    size={32}
                  >
                    {item?.raw?.[labelField.value]?.charAt?.(0)}
                  </NAvatar>
                )}
                <NSpace vertical size={0} wrapItem={false}>
                  <div>{item?.raw?.[labelField.value]}</div>
                  {descField.value && (
                    <div style={{
                      opacity: 0.6,
                    }}
                    >
                      {item?.raw?.[descField.value]}
                    </div>
                  )}
                </NSpace>
              </NSpace>
            )
          }
          else {
            return item?.raw?.[labelField.value]
          }
        }}
        renderTag={({ option, handleClose }): VNodeChild => {
          return props.multiple
            ? (
                <NTag
                  type="primary"
                  size={props.size}
                  closable
                  round
                  onClose={() => {
                    handleClose()
                  }}
                  style={{
                    '--n-padding': '0',
                  }}
                >
                  {renderTag(option, labelField.value, imageField.value, avatarField.value, descField.value)}
                </NTag>
              )
            : renderTag(option, labelField.value, imageField.value, avatarField.value, descField.value)
        }}
      >
        {{
          action: () => {
            if (props.pagination) {
              return (
                <NPagination
                  size="small"
                  v-model:page={pagination.value.page}
                  pageSlot={3}
                  pageCount={pageCount.value}
                  pageSize={pagination.value.pageSize}
                />
              )
            }
            return null
          },
          ...slots,
        }}
      </NSelect>
    )
  },
})

function renderTag(option: Record<string, any>, labelField: string, imageField?: string, avatarField?: string, descField?: string) {
  return (imageField || descField || avatarField)
    ? (
        <NSpace
          align="center"
          size="small"
          style={{
            padding: '6px 0',
          }}
          wrapItem={false}
        >
          {imageField && (
            <NImage src={option?.raw?.[imageField]} objectFit="cover" width={22} height={22} />
          )}
          {avatarField && (
            <NAvatar
              round
              src={option?.raw?.[avatarField] as string || ''}
              size={22}
            >
              {option?.raw?.[labelField]?.charAt?.(0)}
            </NAvatar>
          )}
          <div>
            {option?.raw?.[labelField]}
          </div>
        </NSpace>
      )
    : option?.raw?.[labelField] || ''
}



---
File: /packages/naiveui/src/components/transfer/index.ts
---

export * from './transfer'



---
File: /packages/naiveui/src/components/transfer/transfer.tsx
---

import type { TransferOption, TransferProps } from 'naive-ui'
import { useList } from '@duxweb/dvha-core'
import { useVModel } from '@vueuse/core'
import { NAvatar, NSpin, NTransfer } from 'naive-ui'
import { defineComponent, ref, toRef, watch } from 'vue'

export interface DuxTransferProps extends TransferProps {
  path: string
  params?: Record<string, any>
  value?: Array<string | number>
  labelField?: string
  valueField?: string
  imageField?: string
  descField?: string
}

export const DuxTransfer = defineComponent<DuxTransferProps>({
  name: 'DuxTransfer',
  props: {
    path: String,
    params: {
      type: Object,
    },
    labelField: {
      type: String,
      default: 'name',
    },
    valueField: {
      type: String,
      default: 'id',
    },
    imageField: {
      type: String,
    },
    descField: {
      type: String,
    },
  },
  extends: NTransfer,
  setup(props, { emit }) {
    const model = useVModel(props, 'value', emit, {
      passive: true,
      defaultValue: props.defaultValue || [],
    })

    const path = toRef(props, 'path', '')
    const params = toRef(props, 'params', {})

    const options = ref<TransferOption[]>([])

    const { data, isLoading } = useList({
      path: path.value,
      filters: params.value,
    })

    watch(data, (res) => {
      options.value = res?.value?.data?.map((row) => {
        const item: Record<string, any> = {
          label: row[props.labelField || 'name'],
          value: row[props.valueField || 'id'],
          raw: row,
        }
        return item
      }) || []
    }, {
      immediate: true,
    })

    return () => (
      <div class="w-full">
        <NSpin show={isLoading.value}>
          <NTransfer
            {...props}
            v-model:value={model.value}
            options={options.value}
            renderTargetLabel={({ option }: { option: Record<string, any> }) => {
              if (props.imageField || props.descField) {
                return (
                  <div style={{
                    padding: '0 6px',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '4px',
                  }}
                  >
                    {props.imageField && (
                      <NAvatar round src={option?.raw[props.imageField]} size={32} />
                    )}
                    <div style={{
                      flex: 1,
                      display: 'flex',
                      flexDirection: 'column',
                      justifyContent: 'center',
                    }}
                    >
                      <div>{option?.raw[props.labelField || 'name']}</div>
                      {props.descField && <div style={{ opacity: 0.6 }}>{option?.raw[props.descField || 'desc']}</div>}
                    </div>
                  </div>
                )
              }
              else {
                return option?.raw[props.labelField || 'name']
              }
            }}
          />
        </NSpin>
      </div>
    )
  },
})



---
File: /packages/naiveui/src/components/tree/index.ts
---

export * from './tree'



---
File: /packages/naiveui/src/components/tree/tree.tsx
---

import type { IUseTreeProps } from '@duxweb/dvha-core'
import type { TreeProps } from 'naive-ui'
import type { PropType } from 'vue'
import { useTree } from '@duxweb/dvha-core'
import { useVModel } from '@vueuse/core'
import { NScrollbar, NSpin, NTree } from 'naive-ui'
import { computed, defineComponent, ref, toRef, watch } from 'vue'

export interface DuxTreeProps extends TreeProps {
  path?: string
  params?: Record<string, any>
  height?: string
  value?: Array<string | number> | null
  defaultValue?: Array<string | number> | null
  hookProps?: IUseTreeProps
  onUpdateValue?: (value: valueKey[]) => void
}

type valueKey = string | number

export const DuxTree = defineComponent<DuxTreeProps>({
  name: 'DuxTree',
  props: {
    path: String,
    params: Object as PropType<Record<string, any>>,
    height: String,
    value: Array as PropType<valueKey[]>,
    defaultValue: Array as PropType<valueKey[]>,
    hookProps: Object as PropType<IUseTreeProps>,
  },
  extends: NTree,
  setup(props, { emit }) {
    const params = toRef(props, 'params', {})
    const path = toRef(props, 'path', '')

    const model = useVModel(props, 'value', emit, {
      passive: true,
      deep: true,
      defaultValue: props.defaultValue || [],
    })

    const expanded = ref<valueKey[]>([])

    const { options, loading, expanded: expandedKeys } = useTree({
      path: path.value,
      params: params.value,
      ...props.hookProps,
    })

    watch(expandedKeys, (v) => {
      expanded.value = v as valueKey[]
    })

    const treeProps = computed(() => {
      const { hookProps, height, ...rest } = props
      return rest
    })

    return () => (
      <NSpin
        show={loading.value}
      >
        <NScrollbar style={{
          height: props.height || '300px',
        }}
        >
          <NTree
            {...treeProps.value}
            cascade
            checkable
            defaultExpandAll
            selectable={false}
            expandedKeys={expanded.value}
            onUpdateExpandedKeys={(v) => {
              expanded.value = v
            }}
            data={options.value || []}
            checkedKeys={model.value || []}
            onUpdateCheckedKeys={(v) => {
              model.value = v
              props.onUpdateValue?.(v)
            }}
          >
          </NTree>
        </NScrollbar>
      </NSpin>
    )
  },
})



---
File: /packages/naiveui/src/components/treeSelect/index.ts
---

export * from './treeSelect'



---
File: /packages/naiveui/src/components/treeSelect/treeSelect.tsx
---

import type { IUseTreeProps } from '@duxweb/dvha-core'
import type { TreeSelectProps } from 'naive-ui'
import type { PropType } from 'vue'
import { useTree } from '@duxweb/dvha-core'
import { useVModel } from '@vueuse/core'
import { NTreeSelect } from 'naive-ui'
import { defineComponent, toRef } from 'vue'

interface DuxTreeSelectProps extends TreeSelectProps {
  path?: string
  params?: Record<string, any>
  hookProps?: IUseTreeProps
}

export const DuxTreeSelect = defineComponent<DuxTreeSelectProps>({
  name: 'DuxTreeSelect',
  props: {
    path: String,
    params: Object as PropType<Record<string, any>>,
    hookProps: Object as PropType<IUseTreeProps>,
  },
  extends: NTreeSelect,
  setup(props, { emit }) {
    const params = toRef(props, 'params', {})
    const path = toRef(props, 'path', '')

    const model = useVModel(props, 'value', emit, {
      passive: true,
      deep: true,
      defaultValue: props.defaultValue || [],
    })

    const { options, loading } = useTree({
      path: path.value,
      params: params.value,
      ...props.hookProps,
    })

    return () => (
      <NTreeSelect
        {...props}
        loading={loading.value}
        options={options.value}
        v-model:value={model.value}
      >
      </NTreeSelect>
    )
  },
})



---
File: /packages/naiveui/src/components/index.ts
---

export * from './autoComplete'
export * from './cascader'
export * from './mention'
export * from './select'
export * from './transfer'
export * from './tree'
export * from './treeSelect'



---
File: /packages/naiveui/src/hooks/index.ts
---

export * from './menu'
export * from './tab'
export * from './table'
export * from './upload'



---
File: /packages/naiveui/src/hooks/menu.ts
---

import type { UseMenuProps } from '@duxweb/dvha-core'
import type { MenuOption } from 'naive-ui'
import { arrayToTree, useMenu } from '@duxweb/dvha-core'
import { computed, h } from 'vue'
import { RouterLink } from 'vue-router'

export function useNaiveMenu(props?: UseMenuProps) {
  const menu = useMenu(props)

  const options = computed((): MenuOption[] => {
    const data = menu.getMenu(true).map((item) => {
      return {
        ...item,
        key: item.name,
        icon: item?.icon
          ? () => {
              return h('div', {
                class: `${item.icon} size-5`,
              })
            }
          : undefined,
        labelName: item.label,
        label: () => {
          return item.path
            ? h(
                RouterLink,
                {
                  to: {
                    path: item.path,
                  },
                },
                { default: () => item.label },
              )
            : item.label
        },
      }
    })

    return arrayToTree(data, {
      idKey: 'key',
      parentKey: 'parent',
      childrenKey: 'children',
      sortKey: 'sort',
    }, undefined)
  })

  return {
    options,
    ...menu,
  }
}



---
File: /packages/naiveui/src/hooks/tab.ts
---

import { useTabStore } from '@duxweb/dvha-core'
import { storeToRefs } from 'pinia'
import { computed } from 'vue'
import { useRouter } from 'vue-router'

export function useNaiveTab() {
  const tab = useTabStore()
  const { tabs, current } = storeToRefs(tab)

  const router = useRouter()

  const props = computed(() => {
    return {
      value: current.value,
      defaultValue: current.value || '',
      onClose: (value) => {
        tab.delTab(value, (item) => {
          router.push(item.path || '')
        })
      },
      onUpdateValue: (value) => {
        tab.changeTab(value, (item) => {
          router.push(item.path || '')
        })
      },
    }
  })

  return {
    ...tab,
    tabs,
    current,
    tabsProps: props,
  }
}



---
File: /packages/naiveui/src/hooks/table.tsx
---

import type { UseExtendListProps } from '@duxweb/dvha-core'
import type { DataTableBaseColumn, DataTableExpandColumn, DataTableFilterState, DataTableProps, DataTableRowKey, DataTableSelectionColumn, DataTableSortState, PaginationProps } from 'naive-ui'
import type { ComputedRef, MaybeRef, Ref } from 'vue'
import { treeToArr, useExtendList } from '@duxweb/dvha-core'
import { watchDebounced } from '@vueuse/core'
import { cloneDeep } from 'lodash-es'
import { computed, ref, toRef, watch } from 'vue'

export interface TableColumnExtend {
  show?: boolean
  key?: TableColumnKey
}

export interface TablePagination {
  page: number
  pageSize: number
}

export type TableColumnKey = string | number

export type DataTableColumn = DataTableBaseColumn | DataTableExpandColumn | DataTableSelectionColumn
export type TableColumn = DataTableColumn & TableColumnExtend

export interface UseTableProps extends Omit<UseExtendListProps, 'key'> {
  key?: TableColumnKey
  columns: MaybeRef<TableColumn[]>
  expanded?: boolean
}

export interface UseNaiveTableReturn extends ReturnType<typeof useExtendList> {
  // 表格特有的属性
  tablePagination: ComputedRef<PaginationProps>
  table: ComputedRef<DataTableProps>
  columns: Ref<TableColumn[]>
  columnSelected: ComputedRef<string[]>
  onUpdateColumnSelected: (v: string[]) => void

}

export function useNaiveTable(props: UseTableProps): UseNaiveTableReturn {
  const filters = toRef(props, 'filters', {})
  const sorters = toRef(props, 'sorters', {})
  const tableColumns = toRef(props, 'columns', [])

  const tableFilters = ref<Record<string, any>>({})
  const tableExpanded = ref<DataTableRowKey[]>([])

  const dataFilters = ref<Record<string, any>>({
    ...filters.value,
    ...tableFilters.value,
  })

  watchDebounced([filters, tableFilters], ([filtersValue, tableFiltersValue]) => {
    Object.keys(dataFilters.value).forEach((key) => {
      delete dataFilters.value[key]
    })
    Object.assign(dataFilters.value, filtersValue, tableFiltersValue)
  }, {
    debounce: 300,
    deep: true,
  })

  // 使用 useExtendList
  const extendListResult = useExtendList({
    ...props,
    filters: dataFilters.value,
    sorters: sorters.value,
  })

  // 列处理
  const columns = ref<TableColumn[]>([])

  watch(tableColumns, (v) => {
    columns.value = v as TableColumn[]
  }, {
    immediate: true,
  })

  const columnSelected = computed(() => {
    return columns.value.filter(item => item.show !== false && 'key' in item).map(item => (item as any).key as string)
  })

  const onUpdateColumnSelected = (v: string[]) => {
    const newColumns = cloneDeep(tableColumns.value)?.map((item) => {
      if (!('key' in item) || !item?.key || !('title' in item) || !item?.title) {
        return item
      }
      if (!v.includes((item as any).key as string)) {
        item.show = false
      }
      return item
    })

    columns.value = [...newColumns]
  }

  // 选中处理
  const onUpdateChecked = (keys: DataTableRowKey[]) => {
    extendListResult.checkeds.value = keys as any
  }

  // 排序处理
  const onUpdateSorter = (v: DataTableSortState | DataTableSortState[] | null) => {
    const list = Array.isArray(v) ? v : [v]

    const newSorter: Record<string, 'asc' | 'desc'> = {}
    list?.forEach((item) => {
      if (!item?.columnKey) {
        return
      }
      if (item.order) {
        newSorter[item.columnKey] = item.order === 'ascend' ? 'asc' : 'desc'
      }
    })

    extendListResult.onUpdateSorters(newSorter)
  }

  // 筛选处理
  const onUpdateFilter = (v: DataTableFilterState) => {
    const newTablefilter = { ...tableFilters.value }

    Object.entries(v).forEach(([key, value]) => {
      newTablefilter[key] = value
    })

    tableFilters.value = newTablefilter
  }

  // 展开处理
  const onUpdateExpanded = (v: DataTableRowKey[]) => {
    tableExpanded.value = v
  }

  watch([() => props?.expanded, extendListResult.list], ([expanded, list]) => {
    if (!expanded) {
      return
    }
    tableExpanded.value = treeToArr(list, props.key || 'id', 'children')
  })

  // 分页计算
  const tablePagination = computed(() => {
    return {
      page: extendListResult.page.value,
      pageSize: extendListResult.pageSize.value,
      pageCount: extendListResult.pageCount.value,
      pageSizes: extendListResult.pageSizes,
      pageSlot: 5,
      onUpdatePage: extendListResult.onUpdatePage,
      onUpdatePageSize: extendListResult.onUpdatePageSize,
      showSizePicker: true,
      showQuickJumper: true,
    }
  })

  // 表格属性
  const table = computed<DataTableProps>(() => {
    return {
      remote: true,
      checkedRowKeys: extendListResult.checkeds.value as DataTableRowKey[],
      expandedRowKeys: tableExpanded.value,
      onUpdateCheckedRowKeys: onUpdateChecked,
      onUpdateExpandedRowKeys: onUpdateExpanded,
      onUpdateSorter,
      onUpdateFilters: onUpdateFilter,
      loading: extendListResult.isLoading.value,
      data: extendListResult.list.value,
      columns: columns.value.filter(item => item.show !== false),
    } as DataTableProps
  })

  return {
    ...extendListResult,

    tablePagination,
    table,
    columns,
    columnSelected,
    onUpdateColumnSelected,
  }
}



---
File: /packages/naiveui/src/hooks/upload.ts
---

import type { IUseUploadProps } from '@duxweb/dvha-core'
import type { UploadCustomRequestOptions } from 'naive-ui'
import { useUpload } from '@duxweb/dvha-core'
import { watch } from 'vue'

export function useNaiveUpload(props?: IUseUploadProps) {
  const upload = useUpload(props)

  const activeRequests = new Map<string, {
    onFinish?: () => void
    onError?: () => void
    onProgress?: (event: { percent: number }) => void
  }>()

  watch(
    () => upload.uploadFiles.value,
    (files) => {
      files.forEach((file) => {
        const callbacks = activeRequests.get(file.id)
        if (!callbacks)
          return

        if (file.status === 'uploading' && file.progress && callbacks.onProgress) {
          callbacks.onProgress({
            percent: file.progress.percent || 0,
          })
        }
        else if (file.status === 'success') {
          callbacks.onFinish?.()
          activeRequests.delete(file.id)
        }
        else if (file.status === 'error') {
          callbacks.onError?.()
          activeRequests.delete(file.id)
        }
      })
    },
    { deep: true },
  )

  const request = (options: UploadCustomRequestOptions) => {
    const { file, onFinish, onError, onProgress } = options

    const nativeFile = file.file
    if (!nativeFile) {
      onError?.()
      return
    }

    upload.addFiles([nativeFile], 'file').then(() => {
      const uploadFile = upload.uploadFiles.value.find(f => f.file === nativeFile)
      if (!uploadFile) {
        onError?.()
        return
      }

      activeRequests.set(uploadFile.id, {
        onFinish,
        onError,
        onProgress,
      })

      upload.trigger().catch(() => {
        activeRequests.delete(uploadFile.id)
        onError?.()
      })
    }).catch(() => {
      onError?.()
    })
  }

  return {
    ...upload,
    request,
  }
}



---
File: /packages/naiveui/src/index.ts
---

export * from './components'
export * from './hooks'



---
File: /packages/naiveui/.gitignore
---

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# Dependencies
node_modules
.pnp
.pnp.js

# Local env files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Testing
coverage

# Turbo
.turbo

# Vercel
.vercel

# Build Outputs
.next/
out/
build
dist


# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Misc
.DS_Store
*.pem



---
File: /packages/naiveui/CHANGELOG.md
---

# @duxweb/dvha-naiveui

## 1.0.34

## 1.0.33

## 1.0.32

### Patch Changes

- fix: 修正部分显示问题

## 1.0.31

## 1.0.30

## 1.0.29

## 1.0.28

## 1.0.27

## 1.0.26

## 1.0.25

## 1.0.24

## 1.0.23

## 1.0.22

## 1.0.21

## 1.0.20

## 1.0.19

### Patch Changes

- feat(pro): 增加上传驱动全局配置
  feat(pro): 修改表单页面组件为居中布局
  feat(pro): 增加图标选择器
  feat(pro): 增加空列表状态页
  feat(pro): 增加空页面状态
  feat(pro): 增加列表筛选组件布局
  deat(pro): 增加侧栏面板的页面样式
  fix(pro): 修正dvha pro popover 背景透明度
  fix(pro): 修改筛选器为 modal 弹窗
  fix(core): 修正无限列表与普通列表的 key

## 1.0.18

## 1.0.17

## 1.0.16

### Patch Changes

- feat: 增加 data 的 apiBasePath 参数

## 1.0.15

## 1.0.14

## 1.0.13

### Patch Changes

- feat: 封装常用异步组件

## 1.0.12

### Patch Changes

- Updated dependencies
  - @duxweb/dvha-core@0.1.23

## 1.0.11

### Patch Changes

- feat: 增加pro版本示例
  fix: 修正部分细节问题
  chore: 更换工具链为 PNPM
- Updated dependencies
  - @duxweb/dvha-core@0.1.22

## 1.0.10

### Patch Changes

- test: 测试版本号

## 1.0.9

### Patch Changes

- test: 测试版本号更正

## 1.0.8

### Patch Changes

- chore: 修改版本依赖

## 1.0.7

### Patch Changes

- chore: 优化tabhook

## 1.0.6

### Patch Changes

- Updated dependencies
  - @duxweb/dvha-core@0.1.21

## 1.0.5

### Patch Changes

- fix: 修正useData 提交重置数据
  chore: 优化弹出层的无障碍访问,优化 i18n 的异常隐藏

## 1.0.4

### Patch Changes

- feat(theme): 增加手动主题切换
  chore(data): 优化数据获取抖动
  feat(export): 增加导出进度监听,增加 maxPage 回调配置
  feat(naiveui): 增加表格增强 hook

## 1.0.3

### Patch Changes

- change: 更换许可协议为 MIT

## 1.0.2

### Patch Changes

- 优化版本依赖为最新版核心,修正 pnpm 下的依赖关系

## 1.0.1

### Patch Changes

- fix: 修正简单授权的方法获取
- Updated dependencies
  - @duxweb/dvha-core@0.1.1

## 1.0.0

### Patch Changes

- Updated dependencies
  - @duxweb/dvha-core@0.1.0

## 0.0.6

### Patch Changes

- fix: 修正编译脚本

## 0.0.5

### Patch Changes

- chore: 更新依赖和编译

## 0.0.4

### Patch Changes

- update base releases

## 0.0.3

### Patch Changes

- fix: 更新内部依赖
- Updated dependencies
  - @duxweb/dvha-core@0.0.3

## 0.0.2

### Patch Changes

- init
- Updated dependencies
  - @duxweb/dvha-core@0.0.2



---
File: /packages/naiveui/LICENSE
---

                   GNU LESSER GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.


  This version of the GNU Lesser General Public License incorporates
the terms and conditions of version 3 of the GNU General Public
License, supplemented by the additional permissions listed below.

  0. Additional Definitions.

  As used herein, "this License" refers to version 3 of the GNU Lesser
General Public License, and the "GNU GPL" refers to version 3 of the GNU
General Public License.

  "The Library" refers to a covered work governed by this License,
other than an Application or a Combined Work as defined below.

  An "Application" is any work that makes use of an interface provided
by the Library, but which is not otherwise based on the Library.
Defining a subclass of a class defined by the Library is deemed a mode
of using an interface provided by the Library.

  A "Combined Work" is a work produced by combining or linking an
Application with the Library.  The particular version of the Library
with which the Combined Work was made is also called the "Linked
Version".

  The "Minimal Corresponding Source" for a Combined Work means the
Corresponding Source for the Combined Work, excluding any source code
for portions of the Combined Work that, considered in isolation, are
based on the Application, and not on the Linked Version.

  The "Corresponding Application Code" for a Combined Work means the
object code and/or source code for the Application, including any data
and utility programs needed for reproducing the Combined Work from the
Application, but excluding the System Libraries of the Combined Work.

  1. Exception to Section 3 of the GNU GPL.

  You may convey a covered work under sections 3 and 4 of this License
without being bound by section 3 of the GNU GPL.

  2. Conveying Modified Versions.

  If you modify a copy of the Library, and, in your modifications, a
facility refers to a function or data to be supplied by an Application
that uses the facility (other than as an argument passed when the
facility is invoked), then you may convey a copy of the modified
version:

   a) under this License, provided that you make a good faith effort to
   ensure that, in the event an Application does not supply the
   function or data, the facility still operates, and performs
   whatever part of its purpose remains meaningful, or

   b) under the GNU GPL, with none of the additional permissions of
   this License applicable to that copy.

  3. Object Code Incorporating Material from Library Header Files.

  The object code form of an Application may incorporate material from
a header file that is part of the Library.  You may convey such object
code under terms of your choice, provided that, if the incorporated
material is not limited to numerical parameters, data structure
layouts and accessors, or small macros, inline functions and templates
(ten or fewer lines in length), you do both of the following:

   a) Give prominent notice with each copy of the object code that the
   Library is used in it and that the Library and its use are
   covered by this License.

   b) Accompany the object code with a copy of the GNU GPL and this license
   document.

  4. Combined Works.

  You may convey a Combined Work under terms of your choice that,
taken together, effectively do not restrict modification of the
portions of the Library contained in the Combined Work and reverse
engineering for debugging such modifications, if you also do each of
the following:

   a) Give prominent notice with each copy of the Combined Work that
   the Library is used in it and that the Library and its use are
   covered by this License.

   b) Accompany the Combined Work with a copy of the GNU GPL and this license
   document.

   c) For a Combined Work that displays copyright notices during
   execution, include the copyright notice for the Library among
   these notices, as well as a reference directing the user to the
   copies of the GNU GPL and this license document.

   d) Do one of the following:

       0) Convey the Minimal Corresponding Source under the terms of this
       License, and the Corresponding Application Code in a form
       suitable for, and under terms that permit, the user to
       recombine or relink the Application with a modified version of
       the Linked Version to produce a modified Combined Work, in the
       manner specified by section 6 of the GNU GPL for conveying
       Corresponding Source.

       1) Use a suitable shared library mechanism for linking with the
       Library.  A suitable mechanism is one that (a) uses at run time
       a copy of the Library already present on the user's computer
       system, and (b) will operate properly with a modified version
       of the Library that is interface-compatible with the Linked
       Version.

   e) Provide Installation Information, but only if you would otherwise
   be required to provide such information under section 6 of the
   GNU GPL, and only to the extent that such information is
   necessary to install and execute a modified version of the
   Combined Work produced by recombining or relinking the
   Application with a modified version of the Linked Version. (If
   you use option 4d0, the Installation Information must accompany
   the Minimal Corresponding Source and Corresponding Application
   Code. If you use option 4d1, you must provide the Installation
   Information in the manner specified by section 6 of the GNU GPL
   for conveying Corresponding Source.)

  5. Combined Libraries.

  You may place library facilities that are a work based on the
Library side by side in a single library together with other library
facilities that are not Applications and are not covered by this
License, and convey such a combined library under terms of your
choice, if you do both of the following:

   a) Accompany the combined library with a copy of the same work based
   on the Library, uncombined with any other library facilities,
   conveyed under the terms of this License.

   b) Give prominent notice with the combined library that part of it
   is a work based on the Library, and explaining where to find the
   accompanying uncombined form of the same work.

  6. Revised Versions of the GNU Lesser General Public License.

  The Free Software Foundation may publish revised and/or new versions
of the GNU Lesser General Public License from time to time. Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.

  Each version is given a distinguishing version number. If the
Library as you received it specifies that a certain numbered version
of the GNU Lesser General Public License "or any later version"
applies to it, you have the option of following the terms and
conditions either of that published version or of any later version
published by the Free Software Foundation. If the Library as you
received it does not specify a version number of the GNU Lesser
General Public License, you may choose any version of the GNU Lesser
General Public License ever published by the Free Software Foundation.

  If the Library as you received it specifies that a proxy can decide
whether future versions of the GNU Lesser General Public License shall
apply, that proxy's public statement of acceptance of any version is
permanent authorization for you to choose that version for the
Library.


---
File: /packages/naiveui/package.json
---

{
  "name": "@duxweb/dvha-naiveui",
  "type": "module",
  "version": "1.0.34",
  "author": "DuxWeb",
  "license": "MIT",
  "exports": {
    ".": {
      "dvha:development": {
        "types": "./src/index.ts",
        "import": "./src/index.ts"
      },
      "types": "./dist/types/index.d.ts",
      "import": "./dist/esm/index.js",
      "require": "./dist/cjs/index.cjs"
    }
  },
  "main": "dist/cjs/index.cjs",
  "module": "dist/esm/index.js",
  "types": "dist/types/index.d.ts",
  "files": [
    "LICENSE",
    "README.md",
    "dist"
  ],
  "scripts": {
    "clean": "rimraf dist",
    "build": "pnpm run clean && vue-tsc --noEmit && vite build && pnpm run build:types",
    "build:types": "vue-tsc --declaration --emitDeclarationOnly --outDir dist/types",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix"
  },
  "dependencies": {
    "tslib": "^2.8.1"
  },
  "devDependencies": {
    "@duxweb/dvha-core": "workspace:*",
    "@vueuse/core": "^13.3.0",
    "lodash-es": "^4.17.21",
    "naive-ui": "^2.42.0",
    "pinia": "^3.0.3",
    "vue": "^3.5.0",
    "vue-router": "^4.5.1"
  }
}



---
File: /packages/naiveui/README.md
---




---
File: /packages/naiveui/tsconfig.json
---

{
  "compilerOptions": {
    "target": "ESNext",
    "jsx": "preserve",
    "jsxImportSource": "vue",
    "lib": [
      "ESNext",
      "DOM"
    ],
    "moduleDetection": "force",
    "useDefineForClassFields": true,
    "baseUrl": ".",
    "rootDir": "src",
    "module": "ESNext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "allowJs": true,
    "strict": true,
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": false,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "declaration": true,
    "importHelpers": true,
    "noEmit": false,
    "outDir": "dist",
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "isolatedModules": true,
    "skipLibCheck": true
  },
  "include": [
    "src/**/*.ts",
    "src/**/*.tsx",
    "src/**/*.vue"
  ],
  "exclude": [
    "node_modules",
    "dist"
  ]
}



---
File: /packages/naiveui/vite.config.ts
---

import { definePackageConfig } from '../../config/vite.config.build'

export default definePackageConfig(__dirname)

